private static void trainModel(ConcurrentLinkedQueue<Rating> ratings) {
        System.out.println("Iniciando Treinamento (pronto para sincronização futura)");

        List<Rating> ratingList = new ArrayList<>(ratings);

        for (int epoch = 0; epoch < NUM_EPOCHS; epoch++) {
            ratingList.parallelStream().forEach(rating -> {
                String user = rating.getUserId();
                double[] userVec = userFactors.get(user);

                for (String genre : rating.getGenres()) {
                    double[] genreVec = genreFactors.get(genre);

                    double prediction = dot(userVec, genreVec);
                    double error = rating.getRating() - prediction;

                    // ⛔ Se quiser sincronizar depois:
                    // synchronized (getUserLock(user)) { ... }
                    // synchronized (getGenreLock(genre)) { ... }
                    updateVectors(userVec, genreVec, error);
                }
            });
        }
    }

    private static void updateVectors(double[] userVec, double[] genreVec, double error) {
        for (int i = 0; i < NUM_FEATURES; i++) {
            double u = userVec[i];
            double g = genreVec[i];
            userVec[i] += LEARNING_RATE * (error * g - REGULARIZATION * u);
            genreVec[i] += LEARNING_RATE * (error * u - REGULARIZATION * g);
        }
    }
